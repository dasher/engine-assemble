/*!
 * engine-assemble <https://github.com/doowb/engine-assemble>
 *
 * Copyright (c) 2014 Brian Woodward, contributors.
 * Licensed under the MIT license.
 */

'use strict';

/**
 * Module dependencies.
 */

var handlebars = module.exports = require('engine-handlebars');
var Helpers = require('handlebars-helpers');
var _ = require('lodash');

// hold reference to original `render`
var handlebarsRender = handlebars.render;
/**
 * Handlebars string support. Render the given `str` and invoke the callback `cb(err, str)`.
 *
 * ```js
 * var engine = require('engine-assemble');
 * engine.render('{{name}}', {name: 'Jon'}, function (err, content) {
 *   console.log(content); //=> 'Jon'
 * });
 * ```
 *
 * @param {String} `str`
 * @param {Object|Function} `options` or callback.
 *     @property {Object} `cache` enable template caching
 *     @property {String} `filename` filename required for caching
 * @param {Function} `cb` callback function.
 * @api public
 */

handlebars.render = function render(str, options, cb) {
  var opts = options || {};
  opts.helpers = _.extend({}, Helpers(opts), opts.helpers);
  handlebarsRender.call(handlebars, str, opts, cb);
};

// hold reference to original `renderSync`
var handlebarsRenderSync = handlebars.renderSync;
/**
 * Synchronously render Handlebars or templates.
 *
 * ```js
 * var engine = require('engine-assemble');
 * engine.renderSync('<%= name %>', {name: 'Jon'});
 * //=> 'Jon'
 * ```
 * @param  {Object} `str` The string to render.
 * @param  {Object} `options` Object of options.
 *   @option {Object} `settings` Settings to pass to Lo-Dash.
 *   @option {Object} `delims` Template delimiters, generated by [delims]
 *   @option {Object} `imports` Template helpers to pass to Lo-Dash.
 * @return {String} Rendered string.
 * @api public
 */

handlebars.renderSync = function renderSync(str, options) {
  var opts = options || {};
  opts.helpers = _.extend({}, Helpers(opts), opts.helpers);
  return handlebarsRenderSync.call(handlebars, str, opts);
};

// hold reference to original `renderFile`
var handlebarsRenderFile = handlebars.renderFile;
/**
 * Handlebars file support. Render a file at the given `path` and callback `cb(err, str)`.
 *
 * ```js
 * var engine = require('engine-assemble');
 * engine.renderSync('foo/bar/baz.tmpl', {name: 'Jon'});
 * //=> 'Jon'
 * ```
 *
 * @param {String} `path`
 * @param {Object|Function} `options` or callback function.
 * @param {Function} `cb` callback function
 * @api public
 */

handlebars.renderFile = function renderFile(path, options, cb) {
  if (typeof options === 'function') {
    cb = options;
    options = {};
  }
  var opts = options || {};
  opts.helpers = _.extend({}, Helpers(opts), opts.helpers);
  handlebarsRenderFile.call(handlebars, path, opts, cb);
};

/**
 * Express support.
 */

handlebars.__express = handlebars.renderFile;
